/******************************************************************************
 *  Relatório do Trabalho 3 -- ED2 -- 2018/2
 *  Password Cracking
 *****************************************************************************/

Nome 1: 
Nome 2:
SO utilizado: Bash on Ubuntu 16.04 - Windows 10 1709
Versão do compilador utilizado: gcc version 5.4.0
Editor(es) de código utilizado(s): Visual Studio Code 
Número de horas gastas para fazer o trabalho (aproximado): 50

/******************************************************************************
 *  Se você usou o arquivo key.c, descreva qualquer modificação/otimização que
 *  você tenha feito no código. Se você não utilizou key.c, descreva a
 *  estrutura de dados que você utilizou para manipular as senhas.
 *****************************************************************************/
Funções como print_key e bit os parametros foram colocados como ponteiros, para
evitar a cópia da estrutura completa a cada momento.
Adicionado um pré processamento dos caracteres em cada posição relativa na palavra



/******************************************************************************
 *  Descreva a sua solução força bruta (brute.c) .
 *****************************************************************************/
Itera por todas as possibilidades, em cada uma delas chama a função de criptografar, 
compara com a senha passada e imprime a senha "descriptografada" se for igual

/******************************************************************************
 *  Faça uma descrição de alto nível do seu programa de quebra de senha
 *  (decrypt.c).
 *****************************************************************************/
Coloca o valor relativo de cada caracter numa matriz RxC;
Calcula todas as possibilidades dos 4 ultimos caracteres em uma Hash Table, 
por exemplo, todas as senhas do formato aaaaxxxx em senhas de 8 digitos.
No resto das possibilidades (senhas no formato xxxxaaaa) subtrai o candidato atual
da senha fornecida, o resultado procura na Hash, e imprime a soma do candidato atual
e da senha encontrada no hash.

/******************************************************************************
 *  Descreva a implementação da tabela de símbolos que você utilizou em
 *  decrypt.c .
 *****************************************************************************/
Uma Hash Table (Separate Chaining) com lista encadeada, na qual cada nó é um 
par chave-valor. Para economizar memória colocamos uma chave custom que tem 
metade do tamanho da chave original, por esse motivo a solução só funciona
em chaves de tamanho par, ou 5 que é um numero pequeno o suficiente para usar
força bruta. Para numeros impar de char, seria necessário retirar a simetria 
do calculo, assim tendo que guardar as chaves completas.

/******************************************************************************
 *  Liste abaixo as versões não criptografadas das senhas fornecidas na
 *  especificação do trabalho. Faça isso SOMENTE se você foi capaz de quebrar
 *  as senhas usando o SEU código.
 *****************************************************************************/

8 caracteres         10 caracteres          12 caracteres
------------         -------------          -------------
congrats             completely             emailwaynecs
youfound             unbreakabl             sothatyoucan
theright             cryptogram
solution             ormaybenot

/******************************************************************************
 *  Quanto tempo a versão força bruta leva para quebrar as senhas de um dado
 *  tamanho? Forneça estimativas com um asterisco se o programa levar mais do
 *  que a sua paciência (por exemplo, um ou dois minutos). Justifique as suas
 *  estimativas.
 *****************************************************************************/

Tamanho     Tempo (segundos)
----------------------------
 4          0.078
 5          4.312
 6          47.922
 8          8 horas* (o tempo aumenta em aproximadamente 600 vezes a cada 2 char)

/******************************************************************************
 *  Quanto tempo decrypt.c leva para quebrar as senhas de um dado tamanho?
 *  Quanto de memória o programa utiliza? Forneça estimativas com um asterisco
 *  se o programa levar mais que a sua paciência ou utilizar mais memória que
 *  o seu sistema possui. Justifique as suas estimativas.
 *****************************************************************************/

Tamanho    Tempo (segundos)    Memória (bytes)
----------------------------------------------
 6         0.031                      1258291
 8         1.328                     35651584
10         62.156                  1140850688
12         13 horas                3288334336 
(arvore feita com a permutação de 5 digitos, com permutação de 6 digitos acontece segfault, 
provavelmente causada por stack overflow, não foi usada a estrutura custom para esse teste)

/******************************************************************************
 *  Quantas operações brute.c faz sobre uma senha com N bits?
 *  Quantas operações decrypt.c faz sobre uma senha com N bits?
 *  Utilize a notação de big-Oh nas suas respostas.
 *****************************************************************************/
Dado que N é dado por C*B.
brute.c faz O(C(N-1)) operações sobre cada senha para gerar a senha e comparar ela com a cifra passada
decrypt.c faz(C^2) operações sobre cada senha para gerar a senha e comparar ela com a cifra passada.

/******************************************************************************
 *  Descreva qualquer problema grave que você encontrou ao desenvolver
 *  o trabalho.
 *****************************************************************************/
Uso de RAM na tabela de simbolos. Começamos usando uma TST mas a quantidade de 
memória era muito grande. 
Mudamos para uma Hash Table (separate chaining) com uma lista encadeada simples
e assim consegumos reduzir bastante o consumo de memória.

/******************************************************************************
 *  Deixe qualquer outro comentário aqui. Fique à vontade para dar um feedback
 *  sobre o quanto você acha que aprendeu com esse trabalho, e se você gostou
 *  de fazê-lo.
 *****************************************************************************/

